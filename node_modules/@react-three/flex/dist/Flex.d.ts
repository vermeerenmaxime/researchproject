import React, { PropsWithChildren } from 'react';
import * as THREE from 'three';
import { ReactThreeFiber } from '@react-three/fiber';
import type { R3FlexProps, FlexYogaDirection, FlexPlane } from './props';
export declare type FlexProps = PropsWithChildren<Partial<{
    /**
     * Root container position
     */
    size: [number, number, number];
    yogaDirection: FlexYogaDirection;
    plane: FlexPlane;
    scaleFactor?: number;
    onReflow?: (totalWidth: number, totalHeight: number) => void;
    disableSizeRecalc?: boolean;
    /** Centers flex container in position.
     *
     * !NB center is based on provided flex size, not on the actual content */
    centerAnchor?: boolean;
}> & R3FlexProps & Omit<ReactThreeFiber.Object3DNode<THREE.Group, typeof THREE.Group>, 'children'>>;
/**
 * Flex container. Can contain Boxes
 */
export declare const Flex: React.ForwardRefExoticComponent<Pick<FlexProps, "wrap" | "alignContent" | "alignItems" | "alignSelf" | "align" | "justifyContent" | "justify" | "flexDirection" | "flexDir" | "dir" | "flexWrap" | "flexBasis" | "basis" | "flexGrow" | "grow" | "flexShrink" | "shrink" | "height" | "width" | "maxHeight" | "maxWidth" | "minHeight" | "minWidth" | "padding" | "p" | "paddingTop" | "pt" | "paddingBottom" | "pb" | "paddingLeft" | "pl" | "paddingRight" | "pr" | "margin" | "m" | "marginTop" | "mt" | "marginLeft" | "ml" | "marginRight" | "mr" | "marginBottom" | "mb" | "children" | "size" | "centerAnchor" | "scaleFactor" | "attach" | "attachArray" | "attachObject" | "attachFns" | "args" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "type" | "isGroup" | "id" | "uuid" | "name" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "visible" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | keyof import("@react-three/fiber/dist/declarations/src/core/events").EventHandlers | "yogaDirection" | "plane" | "onReflow" | "disableSizeRecalc"> & React.RefAttributes<THREE.Group>>;
